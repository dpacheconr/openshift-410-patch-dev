newrelic-infrastructure:
  # newrelic-infrastructure.enabled -- Install the [`newrelic-infrastructure` chart](https://github.com/newrelic/nri-kubernetes/tree/main/charts/newrelic-infrastructure)
  privileged: true
  enabled: true
  verboseLog: true  # Enable debug logs
  # Other options from https://github.com/newrelic/helm-charts/tree/master/charts/newrelic-infrastructure-v3
  config:
    etcd:
      # -- Enable etcd monitoring. Might require manual configuration in some environments.
      enabled: true
      # Discover etcd pods using the following namespaces and selectors.
      # If a pod matches the selectors, the scraper will attempt to reach it through the `endpoints` defined below.
      autodiscover:
        - selector: "k8s-app=etcd"
          namespace: openshift-etcd
          # Set to true to consider only pods sharing the node with the scraper pod.
          # This should be set to `true` if Kind is Daemonset, `false` otherwise.
          matchNode: true
          # Try to reach etcd using the following endpoints.
          endpoints:
            - url: https://localhost:9979
              insecureSkipVerify: true
              auth:
                type: mTLS
                mtls:
                  secretName: etcd-metric-client
                  secretNamespace: openshift-config
    scheduler:
      # -- Enable scheduler monitoring.
      enabled: true
      autodiscover:
        - selector: "app=openshift-kube-scheduler,scheduler=true"
          namespace: openshift-kube-scheduler
          matchNode: true
          endpoints:
            - url: https://localhost:10259
              insecureSkipVerify: true
              auth:
                type: bearer
    controllerManager:
      # -- Enable controller manager monitoring.
      enabled: true
      autodiscover:
        - selector: "app=kube-controller-manager,kube-controller-manager=true"
          namespace: openshift-kube-controller-manager
          matchNode: true
          endpoints:
            - url: https://localhost:10257
              insecureSkipVerify: true
              auth:
                type: bearer
    apiServer:
      # -- Enable API Server monitoring
      enabled: true
      autodiscover:
        - selector: "app=openshift-kube-apiserver,apiserver=true"
          namespace: openshift-kube-apiserver
          matchNode: true
          endpoints:
            - url: https://localhost:6443
              insecureSkipVerify: true
              auth:
                type: bearer

nri-prometheus:
  # nri-prometheus.enabled -- Install the [`nri-prometheus` chart](https://github.com/newrelic/nri-prometheus/tree/main/charts/nri-prometheus)
  enabled: false

nri-metadata-injection:
  # nri-metadata-injection.enabled -- Install the [`nri-metadata-injection` chart](https://github.com/newrelic/k8s-metadata-injection/tree/main/charts/nri-metadata-injection)
  enabled: true

kube-state-metrics:
  # kube-state-metrics.enabled -- Install the [`kube-state-metrics` chart](https://github.com/kubernetes/kube-state-metrics/tree/master/charts/kube-state-metrics) from the stable helm charts repository.
  # This is mandatory if `infrastructure.enabled` is set to `true` and the user does not provide its own instance of KSM version >=1.8 and <=2.0
  enabled: true
  # kube-state-metrics.collectors -- Collectors configuration of kube-state-metric
  # @default -- See [`values.yaml`](values.yaml) of the kube-state-metric chart
  collectors:
    certificatesigningrequests: false
    ingresses: false

nri-kube-events:
  # nri-kube-events.enabled -- Install the [`nri-kube-events` chart](https://github.com/newrelic/nri-kube-events/tree/main/charts/nri-kube-events)
  enabled: true

newrelic-logging:
  # newrelic-logging.enabled -- Install the [`newrelic-logging` chart](https://github.com/newrelic/helm-charts/tree/master/charts/newrelic-logging)
  enabled: false

newrelic-pixie:
  # newrelic-pixie.enabled -- Install the [`newrelic-pixie`](https://github.com/newrelic/helm-charts/tree/master/charts/newrelic-pixie)
  enabled: true

pixie-chart:
  # pixie-chart.enabled -- Install the [`pixie-chart` chart](https://docs.pixielabs.ai/installing-pixie/install-schemes/helm/#3.-deploy)
  enabled: true

newrelic-infra-operator:
  # newrelic-infra-operator.enabled -- Install the [`newrelic-infra-operator` chart](https://github.com/newrelic/newrelic-infra-operator/tree/main/charts/newrelic-infra-operator) (Beta)
  enabled: false

newrelic-k8s-metrics-adapter:
  # newrelic-k8s-metrics-adapter.enabled -- Install the [`newrelic-k8s-metrics-adapter.` chart](https://github.com/newrelic/newrelic-k8s-metrics-adapter/tree/main/charts/newrelic-k8s-metrics-adapter) (Beta)
  enabled: false

global:
  # -- The cluster name for the Kubernetes cluster.
  cluster: ""

  # -- The license key for your New Relic Account. This will be preferred configuration option if both `licenseKey` and `customSecret` are specified.
  licenseKey: ""
  # -- The license key for your New Relic Account. This will be preferred configuration option if both `insightsKey` and `customSecret` are specified.
  insightsKey: ""
  # -- Name of the Secret object where the license key is stored
  customSecretName: ""
  # -- Key in the Secret object where the license key is stored
  customSecretLicenseKey: ""

  # -- Additional labels for chart objects
  labels: {}
  # -- Additional labels for chart pods
  podLabels: {}

  images:
    # -- Changes the registry where to get the images. Useful when there is an internal image cache/proxy
    registry: ""
    # -- Set secrets to be able to fetch images
    pullSecrets: []

  serviceAccount:
    # -- Add these annotations to the service account we create
    annotations: {}
    # -- Configures if the service account should be created or not
    create:
    # -- Change the name of the service account. This is honored if you disable on this chart the creation of the service account so you can use your own
    name:

  # -- (bool) Sets pod's hostNetwork
  # @default -- false
  hostNetwork:
  # -- Sets pod's dnsConfig
  dnsConfig: {}

  # -- Sets pod's priorityClassName
  priorityClassName: ""
  # -- Sets security context (at pod level)
  podSecurityContext: {}
  # -- Sets security context (at container level)
  containerSecurityContext: {}

  # -- Sets pod/node affinities
  affinity: {}
  # -- Sets pod's node selector
  nodeSelector: {}
  # -- Sets pod's tolerations to node taints
  tolerations: []

  # -- Adds extra attributes to the cluster and all the metrics emitted to the backend
  customAttributes: {}

  # -- (bool) Reduces number of metrics sent in order to reduce costs
  # @default -- false
  lowDataMode:

  # -- (bool) In each integration it has different behavior. See [Further information](#values-managed-globally-3) but all aims to send less metrics to the backend to try to save costs |
  # @default -- false
  privileged:

  # -- (bool) Must be set to `true` when deploying in an EKS Fargate environment
  # @default -- false
  fargate:

  # -- Configures the integration to send all HTTP/HTTPS request through the proxy in that URL. The URL should have a standard format like `https://user:password@hostname:port`
  proxy: ""

  # -- (bool) Send the metrics to the staging backend. Requires a valid staging license key
  # @default -- false
  nrStaging:
  fedramp:
    # fedramp.enabled -- (bool) Enables FedRAMP
    # @default -- false
    enabled:

  # -- (bool) Sets the debug logs to this integration or all integrations if it is set globally
  # @default -- false
  verboseLog:


# To add values to the subcharts. Follow Helm's guide: https://helm.sh/docs/chart_template_guide/subcharts_and_globals

# If you wish to monitor services running on Kubernetes you can provide integrations
# configuration under `integrations_config` that it will passed down to the `newrelic-infrastructure` chart.
#
# You just need to create a new entry where the "name" is the filename of the configuration file and the data is the content of
# the integration configuration. The name must end in ".yaml" as this will be the
# filename generated and the Infrastructure agent only looks for YAML files.
#
# The data part is the actual integration configuration as described in the spec here:
# https://docs.newrelic.com/docs/integrations/integrations-sdk/file-specifications/integration-configuration-file-specifications-agent-v180
#
# In the following example you can see how to monitor a Redis integration with autodiscovery
#
#
# newrelic-infrastructure:
#   integrations:
#     nri-redis-sampleapp:
#       discovery:
#         command:
#           exec: /var/db/newrelic-infra/nri-discovery-kubernetes --tls --port 10250
#           match:
#             label.app: sampleapp
#       integrations:
#         - name: nri-redis
#           env:
#             # using the discovered IP as the hostname address
#             HOSTNAME: ${discovery.ip}
#             PORT: 6379
#           labels:
#             env: test
